
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  phone: 'phone',
  password: 'password',
  githubId: 'githubId',
  countryCode: 'countryCode',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MerchantScalarFieldEnum = {
  id: 'id',
  merchantName: 'merchantName',
  email: 'email',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  countryCode: 'countryCode'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  price: 'price',
  description: 'description',
  imageUrl: 'imageUrl',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  merchantId: 'merchantId',
  categoryId: 'categoryId'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  status: 'status',
  paymentStatus: 'paymentStatus',
  orderDate: 'orderDate',
  totalAmount: 'totalAmount',
  paymentMethod: 'paymentMethod',
  shippingAddress: 'shippingAddress',
  shippingMethod: 'shippingMethod',
  trackingNumber: 'trackingNumber',
  transactionReference: 'transactionReference',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  quantity: 'quantity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  orderId: 'orderId',
  productId: 'productId'
};

exports.Prisma.CartScalarFieldEnum = {
  id: 'id',
  quantity: 'quantity',
  total: 'total',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  productId: 'productId'
};

exports.Prisma.CountryScalarFieldEnum = {
  id: 'id',
  code: 'code',
  countryName: 'countryName',
  continentName: 'continentName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  categoryName: 'categoryName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.OrderStatus = exports.$Enums.OrderStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  SHIPPED: 'SHIPPED',
  DELIVERED: 'DELIVERED',
  CANCELLED: 'CANCELLED'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  UNPAID: 'UNPAID',
  PAID: 'PAID',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED'
};

exports.ProductStatus = exports.$Enums.ProductStatus = {
  AVAILABLE: 'AVAILABLE',
  OUT_OF_STOCK: 'OUT_OF_STOCK',
  ARCHIVED: 'ARCHIVED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Merchant: 'Merchant',
  Product: 'Product',
  Order: 'Order',
  OrderItem: 'OrderItem',
  Cart: 'Cart',
  Country: 'Country',
  Category: 'Category'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Users\\HP\\Desktop\\edabit\\Devprojects\\myEcommerce\\backend\\prisma\\src\\generated\\prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\Users\\HP\\Desktop\\edabit\\Devprojects\\myEcommerce\\backend\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": "../../../../.env",
    "schemaEnvPath": "../../../../.env"
  },
  "relativePath": "../../..",
  "clientVersion": "6.17.1",
  "engineVersion": "272a37d34178c2894197e17273bf937f25acdeac",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n  output   = \"./src/generated/prisma\"\n}\n\ndatasource db {\n  provider  = \"postgresql\"\n  url       = env(\"DATABASE_URL\")\n  directUrl = env(\"DIRECT_URL\")\n}\n\nmodel User {\n  id          Int      @id @default(autoincrement())\n  username    String   @unique\n  email       String   @unique\n  phone       String   @unique\n  password    String\n  githubId    String?  @unique @map(\"github_id\")\n  countryCode String   @map(\"country_code\")\n  createdAt   DateTime @default(now()) @map(\"created_at\")\n  updatedAt   DateTime @updatedAt @map(\"updated_at\")\n  cartItems   Cart[]\n  orders      Order[]\n  country     Country  @relation(fields: [countryCode], references: [code], onDelete: Cascade)\n\n  @@map(\"users\")\n}\n\nmodel Merchant {\n  id           Int       @id @default(autoincrement())\n  merchantName String    @map(\"merchant_name\")\n  email        String    @unique\n  createdAt    DateTime  @default(now()) @map(\"created_at\")\n  updatedAt    DateTime  @updatedAt @map(\"updated_at\")\n  countryCode  String    @map(\"country_code\")\n  country      Country   @relation(fields: [countryCode], references: [code])\n  products     Product[]\n\n  @@map(\"merchants\")\n}\n\nmodel Product {\n  id          Int           @id @default(autoincrement())\n  name        String\n  price       Decimal\n  description String?\n  imageUrl    String?       @map(\"image_url\")\n  status      ProductStatus\n  createdAt   DateTime      @default(now()) @map(\"created_at\")\n  updatedAt   DateTime      @updatedAt @map(\"updated_at\")\n  merchantId  Int           @map(\"merchant_id\")\n  categoryId  Int           @map(\"category_id\")\n  cartItems   Cart[]        @relation(\"CartProducts\")\n  orderItems  OrderItem[]\n  category    Category      @relation(fields: [categoryId], references: [id])\n  merchant    Merchant      @relation(fields: [merchantId], references: [id])\n\n  @@map(\"products\")\n}\n\nmodel Order {\n  id                   Int           @id @default(autoincrement())\n  status               OrderStatus\n  paymentStatus        PaymentStatus @default(UNPAID) @map(\"payment_status\")\n  orderDate            DateTime      @default(now()) @map(\"order_date\")\n  totalAmount          Decimal       @default(0) @map(\"total_amount\")\n  paymentMethod        String?       @map(\"payment_method\")\n  shippingAddress      String        @map(\"shipping_address\")\n  shippingMethod       String?       @map(\"shipping_method\")\n  trackingNumber       String?       @map(\"tracking_number\")\n  transactionReference String?       @unique @map(\"transaction_reference\")\n  createdAt            DateTime      @default(now()) @map(\"created_at\")\n  updatedAt            DateTime      @updatedAt @map(\"updated_at\")\n  userId               Int           @map(\"user_id\")\n  items                OrderItem[]\n  customer             User          @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@map(\"orders\")\n}\n\nmodel OrderItem {\n  id        Int      @id @default(autoincrement())\n  quantity  Int      @default(1)\n  createdAt DateTime @default(now()) @map(\"created_at\")\n  updatedAt DateTime @updatedAt @map(\"updated_at\")\n  orderId   Int      @map(\"order_id\")\n  productId Int      @map(\"product_id\")\n  order     Order    @relation(fields: [orderId], references: [id])\n  product   Product  @relation(fields: [productId], references: [id])\n\n  @@map(\"order_items\")\n}\n\nmodel Cart {\n  id        Int      @id @default(autoincrement())\n  quantity  Int      @default(1)\n  total     Decimal  @default(0)\n  createdAt DateTime @default(now()) @map(\"created_at\")\n  updatedAt DateTime @updatedAt @map(\"updated_at\")\n  userId    Int      @map(\"user_id\")\n  productId Int      @map(\"product_id\")\n  product   Product  @relation(\"CartProducts\", fields: [productId], references: [id], onDelete: Cascade)\n  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([userId, productId], name: \"userProduct\")\n  @@map(\"carts\")\n}\n\nmodel Country {\n  id            Int        @id @default(autoincrement())\n  code          String     @unique\n  countryName   String     @map(\"country_name\")\n  continentName String?    @map(\"continent_name\")\n  createdAt     DateTime   @default(now()) @map(\"created_at\")\n  updatedAt     DateTime   @updatedAt @map(\"updated_at\")\n  merchants     Merchant[]\n  users         User[]\n\n  @@map(\"countries\")\n}\n\nmodel Category {\n  id           Int       @id @default(autoincrement())\n  categoryName String    @map(\"category_name\")\n  createdAt    DateTime  @default(now()) @map(\"created_at\")\n  updatedAt    DateTime  @updatedAt @map(\"updated_at\")\n  products     Product[]\n\n  @@map(\"categories\")\n}\n\nenum OrderStatus {\n  PENDING\n  PROCESSING\n  SHIPPED\n  DELIVERED\n  CANCELLED\n}\n\nenum PaymentStatus {\n  UNPAID\n  PAID\n  FAILED\n  REFUNDED\n}\n\nenum ProductStatus {\n  AVAILABLE\n  OUT_OF_STOCK\n  ARCHIVED\n}\n",
  "inlineSchemaHash": "cc7aab78da57a8863e86d3416aada43b73359307d09d550e5386f05930291b06",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"githubId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"github_id\"},{\"name\":\"countryCode\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"country_code\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"cartItems\",\"kind\":\"object\",\"type\":\"Cart\",\"relationName\":\"CartToUser\"},{\"name\":\"orders\",\"kind\":\"object\",\"type\":\"Order\",\"relationName\":\"OrderToUser\"},{\"name\":\"country\",\"kind\":\"object\",\"type\":\"Country\",\"relationName\":\"CountryToUser\"}],\"dbName\":\"users\"},\"Merchant\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"merchantName\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"merchant_name\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"countryCode\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"country_code\"},{\"name\":\"country\",\"kind\":\"object\",\"type\":\"Country\",\"relationName\":\"CountryToMerchant\"},{\"name\":\"products\",\"kind\":\"object\",\"type\":\"Product\",\"relationName\":\"MerchantToProduct\"}],\"dbName\":\"merchants\"},\"Product\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"price\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"imageUrl\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"image_url\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"ProductStatus\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"merchantId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"merchant_id\"},{\"name\":\"categoryId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"category_id\"},{\"name\":\"cartItems\",\"kind\":\"object\",\"type\":\"Cart\",\"relationName\":\"CartProducts\"},{\"name\":\"orderItems\",\"kind\":\"object\",\"type\":\"OrderItem\",\"relationName\":\"OrderItemToProduct\"},{\"name\":\"category\",\"kind\":\"object\",\"type\":\"Category\",\"relationName\":\"CategoryToProduct\"},{\"name\":\"merchant\",\"kind\":\"object\",\"type\":\"Merchant\",\"relationName\":\"MerchantToProduct\"}],\"dbName\":\"products\"},\"Order\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"OrderStatus\"},{\"name\":\"paymentStatus\",\"kind\":\"enum\",\"type\":\"PaymentStatus\",\"dbName\":\"payment_status\"},{\"name\":\"orderDate\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"order_date\"},{\"name\":\"totalAmount\",\"kind\":\"scalar\",\"type\":\"Decimal\",\"dbName\":\"total_amount\"},{\"name\":\"paymentMethod\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"payment_method\"},{\"name\":\"shippingAddress\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"shipping_address\"},{\"name\":\"shippingMethod\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"shipping_method\"},{\"name\":\"trackingNumber\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"tracking_number\"},{\"name\":\"transactionReference\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"transaction_reference\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"user_id\"},{\"name\":\"items\",\"kind\":\"object\",\"type\":\"OrderItem\",\"relationName\":\"OrderToOrderItem\"},{\"name\":\"customer\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"OrderToUser\"}],\"dbName\":\"orders\"},\"OrderItem\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"quantity\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"orderId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"order_id\"},{\"name\":\"productId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"product_id\"},{\"name\":\"order\",\"kind\":\"object\",\"type\":\"Order\",\"relationName\":\"OrderToOrderItem\"},{\"name\":\"product\",\"kind\":\"object\",\"type\":\"Product\",\"relationName\":\"OrderItemToProduct\"}],\"dbName\":\"order_items\"},\"Cart\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"quantity\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"total\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"user_id\"},{\"name\":\"productId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"product_id\"},{\"name\":\"product\",\"kind\":\"object\",\"type\":\"Product\",\"relationName\":\"CartProducts\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"CartToUser\"}],\"dbName\":\"carts\"},\"Country\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"code\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"countryName\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"country_name\"},{\"name\":\"continentName\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"continent_name\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"merchants\",\"kind\":\"object\",\"type\":\"Merchant\",\"relationName\":\"CountryToMerchant\"},{\"name\":\"users\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"CountryToUser\"}],\"dbName\":\"countries\"},\"Category\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"categoryName\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"category_name\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"products\",\"kind\":\"object\",\"type\":\"Product\",\"relationName\":\"CategoryToProduct\"}],\"dbName\":\"categories\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

